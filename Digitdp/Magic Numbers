#include <bits/stdc++.h>
using namespace std;
 
 
typedef long long ll;
typedef pair<int,int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef long double ld;
 
typedef set<int>::iterator sit;
typedef map<int,int>::iterator mit;
typedef vector<int>::iterator vit;
 
const int INF = 1e9 + 7;
const int MOD = 1e9 + 7;
const int MAXN = 1e6 + 3;
 
#define _  %  MOD
#define __ %= MOD
 
#define      each(it,s)        for(auto it = s.begin(); it != s.end(); ++it)
#define      sortA(v)          sort(v.begin(), v.end())
#define      sortD(v)          sort(v.begin(), v.end(), greater<auto>())
#define      fill(a)           memset(a, 0, sizeof (a))
 
#define      swap(a,b)        {a=a+b;b=a-b;a=a-b;}
#define      rep(i, n)         for(ll i = 0; i < (n); ++i)
#define      repA(i, a, n)     for(ll i = a; i <= (n); ++i)
#define      repD(i, a, n)     for(ll i = a; i >= (n); --i)
#define watch(x) cout << (#x) << " is " << (x) <<endl
 
#define fi first
#define se second
#define mp make_pair
#define pb push_back
 
#define fbo find_by_order
#define ook order_of_key
 
ll gcd(ll a,ll b){if(b==0) return a; else return gcd(b,a%b);}
ll power(ll x,ll y){ll res=1; while(y>0){if(y&1) res=res*x;y=y>>1;x=x*x;}return res;} // modular exponent
ll m,d;
string a,b;
ll len;
ll dp[2005][2005][2][3];
ll f(string & str,ll pos,ll rem,ll flag,ll cur)
{
	if(pos==str.length())
	{
		if(rem==0)
		{
			return 1;
		}	
		else return 0;
	}
	ll &res=dp[pos][rem][flag][cur];
	if(res!=-1) return res;
	res=0;
	char dgt='0'+d;
	char lmt;
	if(flag==0)
		lmt=str[pos];
	else lmt='9';
	if(cur==2)
	{
		res+=f(str,pos+1,rem,1,cur);
		for(char ch='1';ch<=lmt;ch++)
		{
			if(ch==dgt) continue;
			ll newflag;
			ll newrem;
			if(flag==0 && ch<lmt) newflag=1;
			else if(flag==0 && ch==lmt) newflag=0;
			else if(flag==1) newflag=1;
			newrem=(rem*10+(ch-'0'))%m;
			res+=f(str,pos+1,newrem,newflag,0);
		}
	}
	else if(cur==1)
	{
			for(char ch='0';ch<=lmt;ch++)
		{
			if(ch==dgt) continue;
			ll newflag;
			ll newrem;
			if(flag==0 && ch<lmt) newflag=1;
			else if(flag==0 && ch==lmt) newflag=0;
			else if(flag==1) newflag=1;
			newrem=(rem*10+(ch-'0'))%m;
			res+=f(str,pos+1,newrem,newflag,0);
		}
	}
	else if(cur==0)
	{
		if(dgt<=lmt)
		{
			ll newflag;
			ll newrem;
			if(flag==0 && dgt<lmt) newflag=1;
			else if(flag==0 && dgt==lmt) newflag=0;
			else if(flag==1) newflag=1;
			newrem=(rem*10+d)%m;
			res+=f(str,pos+1,newrem,newflag,1);
		}
	}
	res%=INF;
	return res;
}
bool check(string str)
{
	ll rem=0;
	for(int i=0;i<str.length();i++)
	{
		if(i%2==1 && str[i]-'0'!=d) return false;
		if(i%2==0 && str[i]-'0'==d) return false;
		rem=(rem*10+(str[i]-'0'))%m;
	}
	if(rem!=0) return false;
	return true;
}
int main()
{
    //ios_base::sync_with_stdio(false); // don't use printf and scanf
    //cin.tie(NULL); // cout<<fixed<<setprecision
	cin>>m>>d>>a>>b;
	ll ans=0;
	memset(dp,-1,sizeof(dp));
	ans+=f(b,0,0,0,2);
	ans%=INF;
	memset(dp,-1,sizeof(dp));
	ans-=f(a,0,0,0,2);
	ans+=INF;
	ans%=INF;
	if(check(a))
	{
		ans+=1;
		ans+=INF;
		ans%=INF;
	}
	cout<<ans<<'\n';
	return 0;
}
// JUST ASK YOURSELF DID YOU GIVE YOUR BEST ? ISSE ZYADA
// KUCH KAR BHI NAHI SAKTE !! ENJOY AND GIVE YOUR BEST!!

